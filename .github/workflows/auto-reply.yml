name: AI Discussion Responder

on:
  discussion_comment:
    types: [created] # Trigger when a new comment is created in a discussion

jobs:
  ai_response:
    runs-on: ubuntu-latest # The type of runner that the job will run on

    # No 'env' block for PROJECT_DESCRIPTION_CONTENT here anymore.
    # It will be loaded from a file in the first step.

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # --- NEW STEP TO LOAD PROJECT DESCRIPTION FROM FILE ---
      - name: Load Project Description from File
        id: load_project_desc
        run: |
          # Read the content of project_description.txt into an environment variable
          # This method safely handles multi-line strings and special characters.
          if [ -f "project_description.txt" ]; then
            PROJECT_DESCRIPTION_CONTENT=$(cat project_description.txt)
            echo "PROJECT_DESCRIPTION_CONTENT<<EOF" >> $GITHUB_ENV
            echo "$PROJECT_DESCRIPTION_CONTENT" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "✅ Project description loaded from file."
          else
            echo "❌ Error: project_description.txt not found in the repository root."
            echo "PROJECT_DESCRIPTION_CONTENT=[Project description file not found]" >> $GITHUB_ENV
            exit 1 # Fail the workflow if the description file is missing
          fi
      # --- END NEW STEP ---

      - name: Setup Node.js (for jq, which is often pre-installed but good to ensure)
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Or any recent stable version

      - name: Install jq (JSON processor)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Generate AI response using Gemini API
        id: ai # This ID allows referencing outputs/status of this step
        run: |
          set -euo pipefail

          echo "🧠 Extracting discussion and comment context..."

          REPO_FULL_NAME="${{ github.repository }}"
          REPO_OWNER=$(echo "$REPO_FULL_NAME" | cut -d'/' -f1)
          REPO_NAME=$(echo "$REPO_FULL_NAME" | cut -d'/' -f2)
          echo "Repository: $REPO_OWNER/$REPO_NAME"

          DISCUSSION_NUMBER="${{ github.event.discussion.number }}"
          if [ -z "$DISCUSSION_NUMBER" ]; then
            echo "❌ DISCUSSION_NUMBER is missing. Ensure the workflow is triggered by a discussion_comment event."
            exit 1
          fi
          echo "Discussion Number: $DISCUSSION_NUMBER"

          echo "Fetching discussion ID for repo: $REPO_OWNER/$REPO_NAME, discussion number: $DISCUSSION_NUMBER"
          DISCUSSION_NODE_ID_RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"query { repository(name: \\\"${REPO_NAME}\\\", owner: \\\"${REPO_OWNER}\\\") { discussion(number: ${DISCUSSION_NUMBER}) { id } } }\"}")

          DISCUSSION_NODE_ID=$(echo "$DISCUSSION_NODE_ID_RESPONSE" | jq -r '.data.repository.discussion.id')

          if [ "$DISCUSSION_NODE_ID" == "null" ] || [ -z "$DISCUSSION_NODE_ID" ]; then
            echo "❌ Could not retrieve DISCUSSION_NODE_ID. Raw response: $DISCUSSION_NODE_ID_RESPONSE"
            exit 1
          fi
          echo "✅ Retrieved DISCUSSION_NODE_ID: $DISCUSSION_NODE_ID"

          COMMENT_NODE_ID="${{ github.event.comment.node_id }}"
          if [ -z "$COMMENT_NODE_ID" ]; then
            echo "❌ COMMENT_NODE_ID is missing. Ensure the workflow is triggered by a discussion_comment event."
            exit 1
          fi
          echo "✅ Retrieved COMMENT_NODE_ID: $COMMENT_NODE_ID"

          echo "Fetching replyTo ID for comment: $COMMENT_NODE_ID"
          REPLY_TO_ID_RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"query { node(id: \\\"$COMMENT_NODE_ID\\\") { ... on DiscussionComment { replyTo { id } } } }\"}")

          REPLY_TO_ID=$(echo "$REPLY_TO_ID_RESPONSE" | jq -r '.data.node.replyTo.id')

          if [ "$REPLY_TO_ID" == "null" ] || [ -z "$REPLY_TO_ID" ]; then
            echo "Comment is not a direct reply, setting REPLY_TO_ID to COMMENT_NODE_ID ($COMMENT_NODE_ID)"
            REPLY_TO_ID="$COMMENT_NODE_ID"
          else
            echo "Comment is a reply to: $REPLY_TO_ID"
          fi
          echo "✅ Determined THREAD_ROOT_ID: $REPLY_TO_ID"

          echo "Fetching THREAD_ROOT_BODY from ID: $REPLY_TO_ID"
          THREAD_ROOT_BODY_RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"query { node(id: \\\"$REPLY_TO_ID\\\") { ... on DiscussionComment { body } } }\"}")

          THREAD_ROOT_BODY=$(echo "$THREAD_ROOT_BODY_RESPONSE" | jq -r '.data.node.body')
          if [ "$THREAD_ROOT_BODY" == "null" ] || [ -z "$THREAD_ROOT_BODY" ]; then
            echo "⚠️ Could not retrieve THREAD_ROOT_BODY. Response: $THREAD_ROOT_BODY_RESPONSE"
            THREAD_ROOT_BODY="[Could not retrieve original comment body or thread root is not a comment]"
          fi
          echo "📅 THREAD_ROOT_BODY: >>>$THREAD_ROOT_BODY<<<"

          echo "Fetching THREAD_REPLIES for ID: $REPLY_TO_ID"
          THREAD_REPLIES_RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"query { node(id: \\\"$REPLY_TO_ID\\\") { ... on DiscussionComment { replies(first: 20) { nodes { body } } } } }\"}")

          THREAD_REPLIES=$(echo "$THREAD_REPLIES_RESPONSE" | jq -r '.data.node.replies.nodes[].body' | paste -sd "\n---\n" -)
          if [ "$THREAD_REPLIES" == "null" ] || [ -z "$THREAD_REPLIES" ]; then
            echo "No replies found for this thread root or failed to retrieve."
            THREAD_REPLIES="[No replies in thread]"
          fi
          echo "📅 THREAD_REPLIES: >>>$THREAD_REPLIES<<<"

          # PROJECT_DESC is now safely loaded from file in the previous step
          PROJECT_DESC="${{ env.PROJECT_DESCRIPTION_CONTENT }}"
          if [ -z "$PROJECT_DESC" ] || [ "$PROJECT_DESC" = "[Project description file not found]" ]; then
            echo "❌ PROJECT_DESCRIPTION_CONTENT is missing or not properly loaded."
            exit 1 # Fail if project description is crucial and missing
          fi

          PROMPT="You are a helpful assistant responding to students' questions about software project ideas.

          Here is the project description:
          $PROJECT_DESC
          
          Student comment thread:
          $THREAD_ROOT_BODY
          
          Replies in thread:
          $THREAD_REPLIES
          
          Please provide a clear and concise answer to the student."
          
                    echo "Constructing JSON payload for Gemini API."
                    JSON_PAYLOAD=$(jq -n --arg prompt "$PROMPT" '{
                      contents: [
                        {
                          role: "user",
                          parts: [{ text: $prompt }]
                        }
                      ]
                    }')
          
                    echo "Calling Gemini API..."
                    GEMINI_API_RESPONSE_FULL=$(curl -s -w "\n%{http_code}" \
                      -X POST "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent" \
                      -H "Content-Type: application/json" \
                      -H "X-goog-api-key: ${{ secrets.GEMINI_API_KEY }}" \
                      -d "$JSON_PAYLOAD")
          
                    GEMINI_HTTP_CODE=$(echo "$GEMINI_API_RESPONSE_FULL" | tail -n1)
                    GEMINI_BODY=$(echo "$GEMINI_API_RESPONSE_FULL" | sed '$d')
          
                    echo "🔎 Raw API response (HTTP $GEMINI_HTTP_CODE):" && echo "$GEMINI_BODY"
          
                    if [ "$GEMINI_HTTP_CODE" -ne 200 ]; then
                      echo "❌ Gemini API request failed with status $GEMINI_HTTP_CODE."
                      echo "Error response: $GEMINI_BODY"
                      exit 1
                    fi
          
                    AI_REPLY=$(echo "$GEMINI_BODY" | jq -r '.candidates[0].content.parts[0].text')
          
                    if [ "$AI_REPLY" == "null" ] || [ -z "$AI_REPLY" ]; then
                      echo "❌ Failed to extract AI reply from Gemini API response. Check 'jq' path or API response format."
                      echo "Raw Gemini body: $GEMINI_BODY"
                      exit 1
                    fi
          
                    echo "🧠 AI Reply:" && echo "$AI_REPLY"
          
                    echo "AI_REPLY=$AI_REPLY" >> "$GITHUB_ENV"
                    echo "REPLY_TO_ID=$REPLY_TO_ID" >> "$GITHUB_ENV"
                    echo "DISCUSSION_NODE_ID=$DISCUSSION_NODE_ID" >> "$GITHUB_ENV"
                    echo "✅ Variables set for next step."
          
                - name: Post AI reply as a threaded response (GraphQL)
                  run: |
                    set -euo pipefail
          
                    echo "📨 Replying to comment ID: ${{ env.REPLY_TO_ID }} in discussion ${{ env.DISCUSSION_NODE_ID }}"
          
                    ESCAPED_AI_REPLY=$(echo "${{ env.AI_REPLY }}" | jq -R tojson)
          
                    REPLY_JSON_PAYLOAD=$(jq -n \
                      --arg discussionId "${{ env.DISCUSSION_NODE_ID }}" \
                      --arg replyToId "${{ env.REPLY_TO_ID }}" \
                      --argjson body "$ESCAPED_AI_REPLY" \
                      '{
                        query: "mutation AddReply($discussionId: ID!, $replyToId: ID!, $body: String!) { addDiscussionComment(input: {discussionId: $discussionId, replyToId: $replyToId, body: $body}) { comment { id } } }",
                        variables: { discussionId: $discussionId, replyToId: $replyToId, body: $body }
                      }')
                   
          
                    echo "$REPLY_JSON_PAYLOAD" > reply_payload.json
          
                    echo "Posting GraphQL reply..."
                    POST_REPLY_RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
                      -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                      -H "Content-Type: application/json" \
                      --data-binary "@reply_payload.json")
          
                    if echo "$POST_REPLY_RESPONSE" | jq -e '.errors' > /dev/null; then
                      echo "❌ Failed to post AI reply to GitHub Discussion (GraphQL error):"
                      echo "$POST_REPLY_RESPONSE" | jq '.errors'
                      exit 1
                    fi
          
                    COMMENT_ID=$(echo "$POST_REPLY_RESPONSE" | jq -r '.data.addDiscussionComment.comment.id')
                    if [ "$COMMENT_ID" == "null" ] || [ -z "$COMMENT_ID" ]; then
                      echo "❌ Failed to get comment ID from GitHub API response after posting."
                      echo "Raw response: $POST_REPLY_RESPONSE"
                      exit 1
                    fi
          
                    echo "✅ Successfully posted AI reply with ID: $COMMENT_ID"
                    echo "$POST_REPLY_RESPONSE"
