- name: Generate AI response using Gemini API
  id: ai
  run: |
    echo "🧠 Extracting discussion and comment context..."

    DISCUSSION_NODE_ID=$(curl -s -X POST https://api.github.com/graphql \
      -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      -H "Content-Type: application/json" \
      -d '{
        "query": "query { repository(name: \"'"${REPO##*/}"'\", owner: \"'"${REPO%%/*}"'\") { discussion(number: '"$DISCUSSION_NUMBER"') { id } } }"
      }' | jq -r '.data.repository.discussion.id')

    COMMENT_NODE_ID=${{ github.event.comment.node_id }}

    # Get the parent ID if this is a reply, otherwise use this comment ID
    REPLY_TO_ID=$(curl -s -X POST https://api.github.com/graphql \
      -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      -H "Content-Type: application/json" \
      -d '{
        "query": "query { node(id: \"'"$COMMENT_NODE_ID"'\") { ... on DiscussionComment { replyTo { id } } } }"
      }' | jq -r '.data.node.replyTo.id')

    # If it's not a reply, use the comment ID itself
    if [ "$REPLY_TO_ID" == "null" ] || [ -z "$REPLY_TO_ID" ]; then
      REPLY_TO_ID=$COMMENT_NODE_ID
    fi

    # Fetch the parent comment body
    THREAD_ROOT_BODY=$(curl -s -X POST https://api.github.com/graphql \
      -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      -H "Content-Type: application/json" \
      -d '{
        "query": "query { node(id: \"'"$REPLY_TO_ID"'\") { ... on DiscussionComment { body } } }"
      }' | jq -r '.data.node.body')

    # Fetch replies to that root comment
    THREAD_REPLIES=$(curl -s -X POST https://api.github.com/graphql \
      -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      -H "Content-Type: application/json" \
      -d '{
        "query": "query { node(id: \"'"$REPLY_TO_ID"'\") { ... on DiscussionComment { replies(first: 20) { nodes { body } } } } }"
      }' | jq -r '.data.node.replies.nodes[].body' | paste -sd "\n---\n" -)

    echo "📥 THREAD_ROOT_BODY: >>>$THREAD_ROOT_BODY<<<"
    echo "📥 THREAD_REPLIES: >>>$THREAD_REPLIES<<<"

    PROMPT=$(cat <<EOF
You are a helpful assistant responding to students' questions about software project ideas.

Here is the project description:
$PROJECT_DESC

Student comment thread:
$THREAD_ROOT_BODY

Replies in thread:
$THREAD_REPLIES

Please provide a clear and concise answer to the student.
EOF
)

    JSON_PAYLOAD=$(jq -n --arg prompt "$PROMPT" '{
      contents: [
        {
          role: "user",
          parts: [{ text: $prompt }]
        }
      ]
    }')

    RESPONSE=$(curl -s \
      -X POST "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent" \
      -H "Content-Type: application/json" \
      -H "X-goog-api-key: ${{ secrets.GEMINI_API_KEY }}" \
      -d "$JSON_PAYLOAD")

    echo "🔎 Raw API response:" && echo "$RESPONSE"

    echo "$RESPONSE" > response.json
    AI_REPLY=$(jq -r '.candidates[0].content.parts[0].text' response.json)

    echo "🧠 AI Reply:" && echo "$AI_REPLY"

    printf "AI_REPLY<<EOF\n%s\nEOF\n" "$AI_REPLY" >> $GITHUB_ENV
    if [ -z "$DISCUSSION_NODE_ID" ] || [ -z "$REPLY_TO_ID" ]; then
      echo "❌ Required DISCUSSION_NODE_ID or REPLY_TO_ID is missing."
      exit 1
    fi

    echo "REPLY_TO_ID=$REPLY_TO_ID" >> $GITHUB_ENV
    echo "DISCUSSION_NODE_ID=$DISCUSSION_NODE_ID" >> $GITHUB_ENV

- name: Post AI reply as a threaded response (GraphQL)
  run: |
    echo "💬 Replying to comment ID: $REPLY_TO_ID in discussion $DISCUSSION_NODE_ID"
    jq -n --arg discussionId "$DISCUSSION_NODE_ID" --arg replyToId "$REPLY_TO_ID" --arg body "$AI_REPLY" '{
      query: "mutation AddReply($discussionId: ID!, $replyToId: ID!, $body: String!) { addDiscussionComment(input: {discussionId: $discussionId, replyToId: $replyToId, body: $body}) { comment { id } } }",
      variables: { discussionId: $discussionId, replyToId: $replyToId, body: $body }
    }' > reply.json

    curl -s -X POST https://api.github.com/graphql \
      -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      -H "Content-Type: application/json" \
      --data-binary "@reply.json"
